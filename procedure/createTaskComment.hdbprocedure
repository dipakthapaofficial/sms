PROCEDURE "SERVICE_MANAGEMENT_SYSTEM"."sms.procedure::createTaskComment" (
	IN task_comment "SERVICE_MANAGEMENT_SYSTEM"."sms.data::SR.TaskComment",
	OUT error "SERVICE_MANAGEMENT_SYSTEM"."sms.data::Procedure.errors"
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
	--DEFAULT SCHEMA <default_schema_name>
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
 DECLARE lv_comment STRING;
 DECLARE lv_user_id STRING;
 DECLARE lv_task INTEGER;
 DECLARE lv_created_date TIMESTAMP;
 
 SELECT USER_ID, COMMENT, TASK_ID
     into lv_user_id, lv_comment, lv_task from :task_comment;
     
 IF :lv_comment = '' THEN
 	error = SELECT 500 AS HTTP_STATUS_CODE, 
               'Invalid Comment ' || lv_comment AS ERROR_MESSAGE, 
                     'Comment must not be empty' AS DETAIL from DUMMY;

 ELSEIF :lv_user_id = '' THEN
 	error = SELECT 500 AS HTTP_STATUS_CODE, 
               'Invalid User ' || lv_user_id AS ERROR_MESSAGE, 
                     'User must not be empty' AS DETAIL from DUMMY;
 
 ELSEIF :lv_task = null THEN
 	error = SELECT 500 AS HTTP_STATUS_CODE, 
               'Invalid Task ' || lv_task AS ERROR_MESSAGE, 
                     'Task must not be empty' AS DETAIL from DUMMY;

 ELSE
 	
 	INSERT INTO "sms.data::SR.TaskComment"
	             VALUES ("sms.data::taskCommentId".NEXTVAL, lv_task, lv_user_id,
	          lv_comment, now());
                     
 END IF;
 
END;
